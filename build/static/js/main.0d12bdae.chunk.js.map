{"version":3,"sources":["containers/Home.js","containers/Login.js","components/AppliedRoute.js","Routes.js","App.js","serviceWorker.js","config.js","index.js"],"names":["Home","className","React","Component","Login","props","useState","email","setEmail","password","setPassword","event","a","preventDefault","Auth","signIn","alert","userHasAuthenticated","history","push","message","onSubmit","FormGroup","controlId","bsSize","ControlLabel","FormControl","autoFocus","value","onChange","e","target","type","Button","block","disabled","length","AppliedRoute","C","component","appProps","rest","render","Routes","path","exact","withRouter","isAuthenticated","isAuthenticating","setIsAuthenticating","currentSession","signOut","useEffect","onLoad","Navbar","fluid","collapseOnSelect","Header","Brand","to","Toggle","Collapse","Nav","pullRight","NavItem","onClick","Boolean","window","location","hostname","match","REGION","USER_POOL_ID","APP_CLIENT_ID","Amplify","configure","mandatorySignIn","region","config","userPoolId","userPoolWebClientId","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d12bdae.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Home.css\";\nimport RequireLogin from \"../common/RequireLogin\"\n\nclass Home extends React.Component{\n    render() {\n\n        return (\n            <div className=\"Home\">\n                <div className=\"lander\">\n                    <h1>Scratch</h1>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Home;","import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport \"./Login.css\";\nimport { Auth } from \"aws-amplify\";\n\nexport default function Login(props) {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    function validateForm() {\n        return email.length > 0 && password.length > 0;\n    }\n\n    // async function checkLogin() {\n    //     console.log(props);\n    //     if (await Auth.currentUserInfo()) {\n    //         return true;\n    //     } else {\n    //         return false;\n    //     }\n    // }\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n\n        try {\n            await Auth.signIn(email, password);\n            alert(\"Logged in\");\n            props.userHasAuthenticated(true);\n            props.history.push(\"/\");\n        } catch (e) {\n            alert(e.message);\n        }\n    }\n\n    // if (checkLogin()) {\n    //     return <Redirect to={\"/login\"}/>\n    // }\n    return (\n\n        <div className=\"Login\">\n            <form onSubmit={handleSubmit}>\n                <FormGroup controlId=\"email\" bsSize=\"large\">\n                    <ControlLabel>Email</ControlLabel>\n                    <FormControl\n                        autoFocus\n                        value={email}\n                        onChange={e => setEmail(e.target.value)}\n                    />\n                </FormGroup>\n                <FormGroup controlId=\"password\" bsSize=\"large\">\n                    <ControlLabel>Password</ControlLabel>\n                    <FormControl\n                        value={password}\n                        onChange={e => setPassword(e.target.value)}\n                        type=\"password\"\n                    />\n                </FormGroup>\n                <Button block bsSize=\"large\" disabled={!validateForm()} type=\"submit\">\n                    Login\n                </Button>\n            </form>\n        </div>\n    );\n}","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\nexport default function AppliedRoute({ component: C, appProps, ...rest }) {\n    return (\n        <Route {...rest} render={props => <C {...props} {...appProps} />} />\n    );\n}","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./containers/Home\";\nimport Login from \"./containers/Login\";\nimport AppliedRoute from \"./components/AppliedRoute\";\n\nexport default function Routes({ appProps }) {\n    return (\n        <Switch>\n            <AppliedRoute path=\"/\" exact component={Home} appProps={appProps} />\n            <AppliedRoute path=\"/login\" exact component={Login} appProps={appProps} />\n            { /* Finally, catch all unmatched routes */ }\n        </Switch>\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { Nav, Navbar, NavItem } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport { Auth } from \"aws-amplify\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\n\nfunction App(props) {\n    const [isAuthenticated, userHasAuthenticated] = useState(false);\n    const [isAuthenticating, setIsAuthenticating] = useState(true);\n\n    useEffect(() => {\n        onLoad();\n    }, []);\n\n    async function onLoad() {\n        try {\n            await Auth.currentSession();\n            userHasAuthenticated(true);\n        }\n        catch(e) {\n            if (e !== 'No current user') {\n                alert(e);\n            }\n        }\n\n        setIsAuthenticating(false);\n    }\n\n    async function handleLogout() {\n        await Auth.signOut();\n\n        userHasAuthenticated(false);\n        props.history.push(\"/login\");\n    }\n\n  return (\n      !isAuthenticating &&\n      <div className=\"App container\">\n        <Navbar fluid collapseOnSelect>\n          <Navbar.Header>\n            <Navbar.Brand>\n              <Link to=\"/\">Flowscape</Link>\n            </Navbar.Brand>\n            <Navbar.Toggle />\n          </Navbar.Header>\n            <Navbar.Collapse>\n                <Nav pullRight>\n                    {isAuthenticated\n                        ? <NavItem onClick={handleLogout}>Logout</NavItem>\n                        : <>\n                            <LinkContainer to=\"/login\">\n                                <NavItem>Login</NavItem>\n                            </LinkContainer>\n                        </>\n                    }\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n\n          <Routes appProps={{ isAuthenticated, userHasAuthenticated }} />\n      </div>\n  );\n}\n\nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\n    cognito: {\n        REGION: \"us-west-2\",\n        USER_POOL_ID: \"us-west-2_nQsLCuCep\",\n        APP_CLIENT_ID: \"6jjsafrmbs5rgask0gd5ggm0b6\"\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Amplify from 'aws-amplify';\nimport config from './config';\n\nAmplify.configure({\n    Auth: {\n        mandatorySignIn: true,\n        region: config.cognito.REGION,\n        userPoolId: config.cognito.USER_POOL_ID,\n        userPoolWebClientId: config.cognito.APP_CLIENT_ID\n    }\n});\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}